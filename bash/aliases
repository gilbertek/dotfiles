# ** [ Folder Navigation ] *************
alias ..="cd .."
alias ...="cd ../.."
alias dl="cd ~/Downloads"
alias dt="cd ~/Desktop"
alias work='cd ~/Projects'
alias trash="sudo rm -rvf ~/.Trash/*"

alias weather="curl -4 http://wttr.in/New_York"
alias whatsmyip='curl -s https://am.i.mullvad.net/json | jq'

# ** [ Some Conveniences ] *************
alias mkdir='mkdir -p'
alias paths='echo -e ${PATH//:/\\n}' # Pretty-print of some PATH variables
alias rmr="rm -rf"
alias ports="lsof -i -P"
alias tree='tree -C'
alias c='clear'
alias e='$EDITOR'
alias v='$VISUAL'
alias h='history'
alias y='yarn'
alias n='npm run'
alias topdir="du -sh */ | sort -rh | head -5"
alias nom="rm -rf node_modules; npm cache clean; npm i"
alias yom="rm -rf node_modules; yarn"

alias mount_usb="sudo mount /dev/sdb1 /mnt/usb"
alias umount_usb="sudo umount /mnt/usb"
alias mount_pi=" sudo mount.cifs //pi/BigDrive /mnt/pi -o user=pi"
alias umount_pi=" sudo umount /mnt/pi"

alias anki="anki -b ~/.anki"

alias filemerge="open -a '/Applications/Xcode.app/Contents/Applications/FileMerge.app'"
alias xcode="open -a '/Applications/Xcode.app'"

# Avoid progress bar and follow redirects
alias curl="curl -sL"

if [ $(which bat) ]; then
  alias cat='bat'
fi

if [ $(which terraform) ]; then
  alias tf='terraform'
fi

alias preview="fzf --preview 'bat --color \"always\" {}'"

# alias help='tldr'

alias watch="watch --color"

# Reload the shell (i.e. invoke as a login shell)
alias reload="exec $SHELL -l"

# JavaScriptCore REPL
jscbin="/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc";
[ -e "${jscbin}" ] && alias jsc="${jscbin}";
unset jscbin;

# ** [ BASH ALIASES ] ****************
alias p='pwd'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias halt='halt -p'
alias v='nvim'
alias s='source ~/.bash_profile'

# ** [ GIT ALIASES ] ******************
alias g=git
alias gf='git fetch'
alias gco='git checkout $(git branch | grep -v $(git rev-parse --abbrev-ref HEAD) | fzf)'
alias gsp='git stash pop $(git stash list | fzf | cut -d=: -f1)'
alias grb='git rebase -i $(git log --all --graph --oneline --decorate | fzf --reverse | sed -Ee "s/.* ([a-f0-9]{6,}) .*/\1/")'
alias gm='git merge --no-ff $(git branch | grep -v $(git rev-parse --abbrev-ref HEAD) | fzf)'
alias gp='git push'

alias gaa='git add --all'
alias ga='git add -p'
alias gci='git commit'
alias gca='git commit --amend --date="$(date)"'
alias wip='gaa && gca -m "WIP"'
alias gst='git stash'

alias gsl='git stash list'
alias gs='git status'
alias gsh='git show HEAD'
alias gd='git diff'
alias grev='git diff master'
alias gh='git history'
alias gha='git history --all'
alias gl='git log'
alias gb='git branch -a'
alias gmt='git mergetool'

alias gsu='git submodule foreach git pull origin master'
alias changelog='git log --format="%h %ai %an %s"'
alias ggpull='git pull --rebase'

alias gmu='git fetch origin -v; git fetch upstream -v; git merge upstream/master'

# git fetch pull
gfpull () { git fetch && git checkout $1 && git pull origin $1; }

# git fetch push
gfpush () { git fetch && git checkout $1 && git push origin $1; }

# git track (create new tracking branch)
gt () { git checkout -b $1 -t origin/$1; }

# git version (tag and branch at a specific deploy point)
gv () { git tag v$1 && git checkout -b $1 && git push origin v$1 && git push origin $1; }

# ** [ DOCKER ALIASES ] ******************
alias dk='docker'
alias dki='docker image'
alias dkc='docker container'
alias dkm='docker-machine'
alias dkm:reload='eval $(docker-machine env default)'
alias dk:rd='docker run -d '

# ** [ GOLANG ALIASES ] ******************

# ** [ RUBY ALIASES ] ******************
alias web='ruby -run -e httpd . -p 5000'

alias b='bundle'
alias bi="bundle install --path vendor/bundle --binstubs vendor/bundle/bin"
alias be="bundle exec"
alias binit="bi && bundle package && echo 'vendor/bundle' >> .gitignore && echo 'vendor/cache' >> .gitignore"
alias rails_best='rails_best_practices -e "db/migrate,vendor" -f html .'
alias cop='rubocop'
alias devlog='tail -f log/development.log'
alias cucumber='bundle exec cucumber'
alias rspec='bundle exec rspec'
alias rake='bundle exec rake'
alias cap='bundle exec cap'

# ** [ PYTHON ALIASES ] ******************
alias pjson='python -mjson.tool'
alias pip:up='pip3 install --upgrade pip setuptools wheel'

# ** [ ANDROID ALIASES ] ******************
alias adb-screenshot='adb shell screencap -p | sed 's/\r$//' > screen.png'
alias adbkill='sudo /usr/local/share/android-sdk/platform-tools/adb kill-server'
alias adbstart='sudo /usr/local/share/android-sdk/platform-tools/adb start-server'
alias adbrestart='adbkill;adbstart'

# ** [ ELIXIR ALIASES ] ******************
alias mps="[ -d assets ] && iex -S mix phx.server || iex -S mix phoenix.server"
alias iexm="iex -S mix"
alias phx:help='mix help | grep -i phoenix'

# ** [ C++ ALIASES ] ******************
alias cppcompile='c++ -std=c++11 -stdlib=libc++'

# ** [ POSTGRESQL ALIASES ] ******************
alias pg:start="pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start"
alias pg:stop="pg_ctl -D /usr/local/var/postgres stop -s -m fast"
alias pg:status="pg_ctl -D /usr/local/var/postgres status"
# alias parity='development restore production --app vive-production'

# ** [ Mysql ALIASES ] ******************
alias mysql:start="mysql.server start"
alias mysql:stop="mysql.server stop"

# ** [ REDIS ALIASES ] ******************
alias redis:start="redis-server > /dev/null &"
function redis:stop {
  ps -ax | grep redis-server | awk 'NR==1{print $1}' | xargs kill
}

# ** [ TMUX ALIASES ] ******************
alias tml="tmux list-sessions"
alias tma="tmux attach-session -t $1"
alias tmk="tmux kill-session -t $1"
alias mux='tmuxinator'

# ** [ YOUTUBE-DL SHORTCUTS ] ******************
# youtube downloader
alias yt-video="youtube-dl -citk --max-quality mp4 --write-auto-sub --write-sub --sub-lang en,es"
alias yt-audio="youtube-dl -citk --max-quality mp3 --audio-format mp3 --extract-audio --audio-format mp3 --audio-quality 192k"

# ** [ MACOS SHORTCUTS ] ******************
alias mac-clean-logs='sudo rm -rf /private/var/log/asl/*.asl'

# ** [ KUBECTL SHORTCUTS ] ******************
alias k8='kubectl'
alias k8:i="kubectl --insecure-skip-tls-verify=true"
alias kdescribe="kubectl describe"
alias kget="kubectl get"
alias kcreate="kubectl create"
alias kapply="kubectl apply"
alias kdelete="kubectl delete"
alias kscale="kubectl scale"
alias krollout="kubectl rollout"
alias klogs="kubect logs"
# Query common resources
# Resource reference list:
# pods (po), services (svc), deployments, replicasets (rs)
# replicationcontrollers (rc), nodes (no), events (ev),
# limitranges (limits), persistentvolumes (pv),
# persistentvolumeclaims (pvc), resourcequotas (quota),
# namespaces (ns), serviceaccounts (sa), ingresses (ing),
# horizontalpodautoscalers (hpa), daemonsets (ds), configmaps,
# componentstatuses (cs), endpoints (ep), and secrets.
alias pods="get pods"
alias services="get svc"
alias svc="get svc"
alias deployments="get deployments"
alias kdep="get deployments" # NON-STANDARD!!
alias replicasets="get rs"
alias replicationcontrollers="get rc"
alias rc="get rc"
alias nodes="get nodes"
alias limitranges="get limitranges"
alias limits="get limitranges"
alias events="get events"
alias persistentvolumes="get pv"
alias pv="get pv"
alias persistentvolumeclaims="get pvc"
alias pvc="get pvc"
alias namespaces="get ns"
alias ingresses="get ing"
alias ing="get ing"
alias configmaps="get configmaps"
alias secrets="get secrets"

# ** [CLOJURE SHORTCUTS ] ******************
alias l='lein'
alias b='boot'
alias shadow='shadow-cljs'
alias shdw='shadow-cljs'
# alias clj-repl='function do_repl { clojure -J-Dclojure.server.repl="{:port ${1:-5555} :accept clojure.core.server/repl}" -A:rebel; }; do_repl'
alias clj-repl='clojure -Sdeps "{:deps {com.bhauman/rebel-readline {:mvn/version \"0.1.4\"}}}" -m rebel-readline.main'
alias cljs-repl='function do_repl { clojure -J-Dclojure.server.repl="{:port ${1:-5555} :accept cljs.server.node/repl}" -R:cljs-canary -A:rebel-cljs -m cljs.main -re node -r; }; do_repl'
alias cljs='clj -Sdeps "{:deps {org.clojure/clojurescript {:mvn/version \"1.9.946\"}}}" -m cljs.repl.node'

# ** [MAVEN SHORTCUTS ] ******************
alias mc='mvn --quiet clean'
alias mci='mvn --quiet clean install'
alias mcist='mvn --quiet clean install -DskipAllTests -T3 -Dmaven.test.skip=true'
alias mcisst='mvn --quiet clean install -DskipTests -DskipITests -DskipAllTests -Dskip.checkstyle -Dcheckstyle.skip -Dpmd.skip -Djacoco.skip -T3'

# ** [HASKELL SHORTCUTS ] ******************
alias sbuild="stack build        -j 2 --test --bench --no-run-tests --no-run-benchmarks"
alias fbuild="stack build --fast -j 2 --test --bench --no-run-tests --no-run-benchmarks"

# ** [ NVIM SHORTCUTS ] ******************
alias nvu="nvim +PlugInstall +UpdateRemotePlugins +qa"

# ** [ NETWORKING SHORTCUTS ] ******************
alias myip='curl ip.appspot.com'                    # myip:         Public facing IP Address
alias netCons='lsof -i'                             # netCons:      Show all open TCP/IP sockets
alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
alias lsock='sudo /usr/sbin/lsof -i -P'             # lsock:        Display open sockets
alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'   # lsockU:       Display only open UDP sockets
alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'   # lsockT:       Display only open TCP sockets
alias ipInfo0='ipconfig getpacket en0'              # ipInfo0:      Get info on connections for en0
alias ipInfo1='ipconfig getpacket en1'              # ipInfo1:      Get info on connections for en1
alias openPorts='sudo lsof -i | grep LISTEN'        # openPorts:    All listening connections
alias showBlocked='sudo ipfw list'                  # showBlocked:  All ipfw rules inc/ blocked IPs

# ** [ WIRESHARK SHORTCUTS ] ******************
alias ws=
# export WS_OPTIONS=(-o tcp.no_subdissector_on_error:false -d tcp.port==1-65535,ssl -o ssl.keylog_file:/home/dsf/PCAPS/all-pcaps.keylogfile)
export WS_OPTIONS=(-o ssl.keylog_file:/home/dsf/PCAPS/all-pcaps.keylogfile)
alias lvs='tmux split -d lnav ssldebug'
alias tsv='truncate -s0 ssldebug'
alias ww='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:/dev/null -r cap.pcapng &'
alias wwss='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:/dev/stdout -r cap.pcapng'
alias wws='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:ssldebug -r cap.pcapng & truncate -s0 ssldebug'
alias wwso='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:ssldebug-orig -r cap.pcapng & truncate -s0 ssldebug-orig'
