#!/usr/bin/env bash

bind "set completion-ignore-case on"        # Case-Insensitive Auto Completion
bind "set show-all-if-ambiguous on"         # Display matches for ambiguous patterns
shopt -s histappend                         # Append to history from all terminals in realtime
shopt -s cmdhist                            # store multiline commands as 1 line
shopt -s cdspell                            # spelling error correction
shopt -s checkwinsize                       # check window size after command and, if necessary, update lines and columns.
shopt -s nocaseglob                         # Case-insensitive globbing (for pathname expansion)
shopt -s extglob
HISTCONTROL="ignoredups:erasedups"          # ignore duplicates(store command once)
HISTSIZE=10000	                            # Larger bash history...
HISTFILESIZE=10000	                        # Larger bash history...
HISTIGNORE="&:ll:ls:c:cd:cd -:pwd:exit:logout:quit:reset" # Don't record some commands
export PROMPT_COMMAND='history -a;history -c;history -r'
export CLICOLOR=1

# Motivation reminder
now=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
alias DATE="date '+%Y-%m-%d'"
alias TIME="date '+%H·%M·%S'"
alias DATETIME="date '+%Y-%m-%d.%H·%M·%S'"
# echo "2019 12 31" | awk '{dt=mktime($0 " 00 00 00")-systime(); print "There are " int(dt/86400/7) " weeks left until the year ends. What will you do?";}'

# Add `~/bin` to the `$PATH`
if [ -d "$HOME/bin" ] ; then
  PATH="$HOME/bin:$PATH"
fi

# Homebrew
[[ ":$PATH:" =~ ":/usr/local/bin:" ]]  || PATH="/usr/local/bin:$PATH"
[[ ":$PATH:" =~ ":/usr/local/sbin:" ]] || PATH="/usr/local/sbin:$PATH"

# Load the shell dotfiles, and then some:
# * ~/.path can be used to extend `$PATH`.
# for file in ~/.{path,bash_prompt,aliases,functions,extra}; do
# 	[ -r "$file" ] && [ -f "$file" ] && source "$file";
# done;
# unset file;

# GO Path setups
export GOPATH=$HOME/Projects/GOAPPS
export PATH=$PATH:$GOPATH/bin
export GOAPPS=$GOPATH/src/github.com/gilbertek

# Groovy Home path setup
export GROOVY_HOME=/usr/local/opt/groovy/libexec

if [ -f /usr/libexec/java_home ]; then
  export JAVA_HOME=`/usr/libexec/java_home`
  export NASHORN_HOME=$JAVA_HOME/bin
fi

# export M2_HOME=/usr/local/Cellar/maven/3.5.4/libexec
# export M2=$M2_HOME/bin
# export PATH=$PATH:$M2_HOME/bin
# export MAVEN_OPTS="-Xmx2048m -Xms512m -XX:MaxPermSize=312M -XX:ReservedCodeCacheSize=128m -Dsun.lang.ClassLoader.allowArraySyntax=true -ea -Dfile.encoding=UTF-8"
# export MAVEN_JMX="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=6969 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false"

# Clojure
export CLOJURE_OPTS="-Xms128M -Xmx512M -server"

# Boot
export BOOT_JVM_OPTIONS="-Xmx8g -client -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Xverify:none -XX:-OmitStackTraceInFastThrow"
export BOOT_COLOR=1
export BOOT_GPG_COMMAND=gpg2

# Haskell/hdevtools Home path setup
export PATH=~/.local/bin:$PATH

# Put GHC on the path globally
GHC_PATH=`stack path | grep compiler-bin | sed -e 's/compiler-bin: //'`
export PATH="$PATH:$GHC_PATH"

# PHP CLI
# export PATH="$(brew --prefix homebrew/php/php70)/bin:$PATH"
# export PATH="/usr/local/opt/php@5.6/bin:$PATH"

# Persistent history in Elixir repl IEx
export ERL_AFLAGS="-kernel shell_history enabled"

# android
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools

# LLVM Bindings
export PATH="/usr/local/opt/llvm/bin:$PATH"

# export PATH=$PATH:$HOME/.luarocks/bin

# Google Cloud SDK.
if [[ -x "$(command -v gcloud)" ]]; then
  source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
  source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
fi

export ANT_OPTS='-Xms512M -Xmx1024M -XX:MaxPermSize=1024M'
export ANT_ARGS='-logger org.apache.tools.ant.listener.AnsiColorLogger'

export EDITOR=nvim
export VISUAL=nvim

export FZF_DEFAULT_OPTS='--height 60% --reverse'

# Setting fd as the default source for fzf
export FZF_DEFAULT_COMMAND='fd --type f'
export FZF_CTRL_T_OPTS="--preview 'bat --color \"always\" {}'"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Disable Homebrew analytics
export HOMEBREW_NO_ANALYTICS=1
export DOTNET_CLI_TELEMETRY_OPTOUT=1

export PROJECT_HOME=$HOME/Projects
export KUBECTL_CONTEXT=$(kubectl config current-context)

### Foreground Colours #######################################################
LIGHT_GREEN='\[\e[32m\]'
LIGHT_RED='\[\033[1;31m\]'
COLOR_RED='\[\e[31m\]'
COLOR_RESET='\[\e[m\]'
COLOR_PURPLE='\[\e[35m\]'
COLOR_ORANGE='\[\e[33m\]'
COLOR_BLUE='\[\e[0;34m\]'
COLOR_CYAN='\[\e[36m\]'
COLOR_GREY='\[\e[0;37m\]'
COLOR_WHITE='\[\033[0m\]'
COLOR_GREEN='\[\e[0;32m\]'
LIGHT_BLUE="\[\033[0;38;05;74m\]"
YELLOW="\[\033[0;38;05;184m\]"
GREEN="\[\033[0;38;05;77m\]"
GREY_SHADOW='\[\e[37;40m\]'
PINK_SHADOW='\[\e[35;40m\]'
GREEN_SHADOW='\[\e[32;40m\]'
ORANGE_SHADOW='\[\e[33;40m\]'

# ♥ ☆ ⚡ λ ❯ » ▸ → 💥 ✚ - Keeping some cool ASCII Characters for reference
CHAR='λ'
GITBRANCH='`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\(\\\\\1\)/`'
# do not create .pyc files
export PYTHONDONTWRITEBYTECODE=x

# PS1="${COLOR_RED}\u${COLOR_RESET} in ${COLOR_GREEN}\W${COLOR_RESET}"
# PS1+="${COLOR_PURPLE}$GITBRANCH${COLOR_RESET}${CHAR}${COLOR_RESET}"

# git dirty functions for prompt
function parse_git_dirty {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working tree clean" ]] && echo "*"
}
function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/ (\1$(parse_git_dirty))/"
}

# PS1="[\[\e[30;1m\]\t\[\e[0m\]]$COLOR_RED\$(parse_git_branch) \[\e[0;34m\]\W\[\e[0m\] "
# PS1+="\[\e[0;31m\]$CHAR \[\e[0m\]"

# PS1="\[\e[1;49;93m\]\`ts\` \[\e[1;32;40m\]< \[\e[m\]\[\e[30;42m\]\w\[\e[1;32;40m\] >\[\e[m\] $ "

# export GIT_PS1_SHOWSTASHSTATE=1
# export PS1="\[\033[7;32m\]\u@\h\[\033[7;34m\] \W\[\033[7;35m\]\$(parse_git_branch)\[\033[00m\] \$ "

PS1="${PINK_SHADOW}\u ${GREY_SHADOW}at ${ORANGE_SHADOW}\h ${GREY_SHADOW}in ${GREEN_SHADOW}\W$(parse_git_branch) ${GREY_SHADOW}${CHAR}${COLOR_RESET} "

# Ensure ssh agent is running
if [ -z "$SSH_AUTH_SOCK" ] ; then
  eval `ssh-agent -s`
  ssh-add ~/.ssh/id_rsa
fi

if command -v xclip >/dev/null; then
  alias pbcopy='xclip -sel clip -i'
  alias pbpaste='xclip -sel clip -o'
fi

# phpenv
if [ -d $HOME/.phpenv ] ; then
  PHPENV_HOME="$HOME/.phpenv"
  export PATH="$PHPENV_HOME/bin:$HOME/.composer/vendor/bin:$PATH"
  eval "$(phpenv init -)"
fi

if command -v perl6 > /dev/null; then
  alias rp='rlwrap perl6'
  alias prove6='prove -r -e perl6'
  alias p6='perl6'
fi

if command -v racket > /dev/null; then
  alias rkt='rlwrap racket'
fi

export MOAR_BINDIR=`perl6 -V | grep moar::bindir | cut -d= -f2`
export MOAR_SHAREDIR=`perl6 -V | grep perl6::libdir | cut -d= -f2`
export PERL6LIB="$HOME/.perl6/lib"
export PATH="$MOAR_BINDIR:$MOAR_SHAREDIR/perl6/site/bin:$PATH"

if [ -d $HOME/.rakudobrew ] ; then
  RAKUDOBREW_HOME="$HOME/.rakudobrew"
  export PATH="$RAKUDOBREW_HOME/bin:$RAKUDOBREW_HOME/moar-nom/install/share/perl6/site/bin:$PATH"
  eval "$(rakudobrew init -)"
fi

# For a ipython notebook and pyspark integration
if which pyspark > /dev/null; then
  export SPARK_HOME="$(brew --prefix apache-spark)/libexec"
  export PYSPARK_SUBMIT_ARGS="--master local[2]"
  export PYSPARK_DRIVER=python3
  export PYSPARK_DRIVER_PYTHON=jupyter
  export PYSPARK_DRIVER_PYTHON_OPTS=notebook
fi

export PATH="$HOME/.cargo/bin:$PATH"
if command -v rustc &>/dev/null; then
  export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
fi

# hub as git
if command -v hub > /dev/null; then
  eval "$(hub alias -s)"
fi

# kubectl
if command -v kubectl &>/dev/null; then
  source <(kubectl completion bash)
fi

# Docker (for mac only)
# if command -v docker-machine > /dev/null; then
#   if [ $(docker-machine status default 2>/dev/null) == "Running" ]; then
#     eval "$(docker-machine env default)"
#   fi
# fi

# asdf package manager
[[ -f /usr/local/opt/asdf/asdf.sh ]] && . /usr/local/opt/asdf/asdf.sh

# OPAM configuration
. $HOME/.asdf/installs/ocaml/4.07.0/opam-init/init.sh > /dev/null 2> /dev/null || true

[ -f ~/.bashrc ]            && . ~/.bashrc
[ -f ~/.bashrc.local ]      && . ~/.bashrc.local
[ -f ~/.aliases ]           && . ~/.aliases
[ -f ~/.aliases.local ]     && . ~/.aliases.local
[ -f ~/.functions ]         && . ~/.functions

# Todo
# Remove dups from path
# This is in reverse order.
paths=(
    /usr/local/sbin
    $HOME/Library/Haskell/bin
    $OCLINT_HOME/bin
    /usr/local/go/bin
    $GOPATH/bin
    /usr/local/opt/openssl/bin
    /Library/TeX/texbin
    $haskell_local_bin
    $HOME/bin
)

# export PATH="$(printf '%s:' "${paths[@]%/}")$PATH"

# Autocompletions
#-------------------------------------------------------------------------------
[[ -f ~/.config/exercism/exercism_completion.bash ]] && \
  . ~/.config/exercism/exercism_completion.bash
[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion
[ -f /usr/local/etc/bash_completion.d/git-completion.bash ] && \
  . /usr/local/etc/bash_completion.d/git-completion.bash