# **[ General ]*******************
bind "set completion-ignore-case on"  # Case-Insensitive Auto Completion

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# Append to the Bash history file, rather than overwriting it
shopt -s histappend

# Autocorrect typos in path names when using `cd`
shopt -s cdspell

# Omit duplicates and commands that begin with a space from history.
export HISTCONTROL='ignoreboth'

# Massive main .bash_history...
export HISTFILESIZE=10000

# Larger session histories...
export HISTSIZE=1000

# Motivation reminder
now=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
alias DATE="date '+%Y-%m-%d'"
alias TIME="date '+%H·%M·%S'"
alias DATETIME="date '+%Y-%m-%d.%H·%M·%S'"

# echo "2017 12 31" | awk '{dt=mktime($0 " 00 00 00")-systime(); \
# print "There are " int(dt/86400/7) " weeks left until the year ends. \
# What will you do?";}';

# Add `~/bin` to the `$PATH`
if [ -d "$HOME/bin" ] ; then
  PATH="$HOME/bin:$PATH"
fi

# Homebrew
[[ ":$PATH:" =~ ":/usr/local/bin:" ]]  || PATH="/usr/local/bin:$PATH"
[[ ":$PATH:" =~ ":/usr/local/sbin:" ]] || PATH="/usr/local/sbin:$PATH"

# GO Path setups
export GOPATH=$HOME/Projects/GOAPPS
export PATH=$PATH:$GOPATH/bin
export GOAPPS=$GOPATH/src/github.com/gilbertek

# Groovy Home path setup
export GROOVY_HOME=/usr/local/opt/groovy/libexec

export JAVA_HOME=$(/usr/libexec/java_home)
export NASHORN_HOME=$JAVA_HOME/bin
# export M2_HOME=/usr/share/maven
# export M2=$M2_HOME/bin
# export MAVEN_OPTS="-Xmx2048m -Xms512m -XX:MaxPermSize=312M -XX:ReservedCodeCacheSize=128m -Dsun.lang.ClassLoader.allowArraySyntax=true -ea -Dfile.encoding=UTF-8"
# export MAVEN_JMX="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=6969 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false"

# Clojure
# export CLOJURE_JAR=$HOME/.m2/repository/org/clojure/clojure/1.9.0/clojure-1.9.0.jar
# export CLOJURE_EXT=$CLOJURE_JAR
export CLOJURE_OPTS="-Xms128M -Xmx512M -server"

# Boot
# export BOOT_JVM_OPTIONS="-Xmx8g -client -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Xverify:none -XX:-OmitStackTraceInFastThrow"
# export BOOT_COLOR=1
# export BOOT_GPG_COMMAND=gpg2

# Haskell/hdevtools Home path setup
export PATH=~/.local/bin:$PATH

# Put GHC on the path globally
GHC_PATH=`stack path | grep compiler-bin | sed -e 's/compiler-bin: //'`
export PATH="$PATH:$GHC_PATH"

# PHP CLI
# export PATH="$(brew --prefix homebrew/php/php70)/bin:$PATH"
export PATH="/usr/local/opt/php@5.6/bin:$PATH"

# Persistent history in Elixir repl IEx
export ERL_AFLAGS="-kernel shell_history enabled"

# android
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools

# export PATH=$PATH:$HOME/.luarocks/bin

# Google Cloud SDK.
if [[ -x "$(command -v gcloud)" ]]; then
  source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
  source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
fi

# export ANT_OPTS='-Xms512M -Xmx1024M -XX:MaxPermSize=1024M'
# export ANT_ARGS='-logger org.apache.tools.ant.listener.AnsiColorLogger'

export EDITOR=nvim
export VISUAL=nvim

export FZF_DEFAULT_OPTS='--height 60% --reverse'

# Setting fd as the default source for fzf
export FZF_DEFAULT_COMMAND='fd --type f'
export FZF_CTRL_T_OPTS="--preview 'bat --color \"always\" {}'"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Disable Homebrew analytics
export HOMEBREW_NO_ANALYTICS=1
export DOTNET_CLI_TELEMETRY_OPTOUT=1

# Visible cucumber step locations
export CUCUMBER_COLORS=comment=cyan

export PROJECT_HOME=$HOME/Projects

export CLICOLOR='true'

export TERM=xterm-256color

export KUBECTL_CONTEXT=$(kubectl config current-context)

### Foreground Colours #######################################################
# Normal Colors
RED=$'\e[0;31m'
GREEN=$'\e[0;32m'
YELLOW=$'\e[0;33m'
BLUE=$'\e[0;34m'

WHITE=$'\e[1;37m'
BLACK=$'\e[0;30m'
PURPLE=$'\e[0;35m'
CYAN=$'\e[0;36m'
GRAY=$'\e[1;30m'
PINK=$'\e[37;1;35m'
ORANGE=$'\e[91m'

# Revert color back to the normal color
NORMAL=$'\e[00m'

# LIGHT COLORS
LIGHT_BLUE=$'\e[1;34m'
LIGHT_GREEN=$'\e[1;32m'
LIGHT_CYAN=$'\e[1;36m'
LIGHT_RED=$'\e[1;31m'
LIGHT_PURPLE=$'\e[1;35m'
LIGHT_YELLOW=$'\e[1;33m'
LIGHT_GRAY=$'\e[0;37m'

ATTRIBUTE_BOLD='\[\e[1m\]'
ATTRIBUTE_RESET='\[\e[0m\]'
COLOR_DEFAULT='\[\e[39m\]'
COLOR_RED='\[\e[31m\]'
COLOR_RED_BOLD='\[\e[1;31m\]'
COLOR_GREEN='\[\[\033[32m\]'
COLOR_YELLOW='\[\e[33m\]'
COLOR_YELLOW_LIGHT='\[\e[;33m\]'
COLOR_YELLOW_BOLD='\[\e[1;32m\]'
COLOR_MAGENTA='\[\e[35m\]'
COLOR_CYAN='\[\e[36m\]'
COLOR_CYAN_LIGHT="\[\033[1;36m\]"
COLOR_BLUE='\[\033[38;5;75m\]'
COLOR_DARK_BLUE="\[\033[0;34m\]"
COLOR_PURPLE="\[\033[0;35m\]"
COLOR_LIGHT_GRAY="\[\033[0;37m\]"
COLOR_RESET='\[\e[m\]'

txtgray='\[\e[0;34;40m\]'
txtcyan='\[\e[1;34;40m\]'
txtred='\[\e[1;31;40m\]'
txtpink='\[\e[1;35;40m\]'
txtend='\[\e[00m\]'

# ♥ ☆ ⚡ λ ❯ » ▸ → 💥 - Keeping some cool ASCII Characters for reference
# Define the prompt character
CHAR='❯'

# PS1="${COLOR_BLUE}[${COLOR_RESET}${COLOR_CYAN}\\u ${COLOR_GREEN}in ${COLOR_YELLOW}\W${COLOR_CYAN}\$(git_branch)${COLOR_BLUE}]${CHAR}${COLOR_RESET}${COLOR_DEFAULT} "

emojis=('🚀' '🎯' '🎾' '🤖' '👽' '👻' '👀' '💍' '🐔' '🐙' '🐤' '🐠' '🍁' '✨' '💥' '🍉' '🍕' '🍪' '🍭' '🍺' '⛵️' '💸' '🔑')
icon=${emojis[$RANDOM % ${#emojis[@]} ]}
# PS1='${icon} \[\e[0;31m\]${PWD##*/}\[\e[m\]$(git_branch "@\[\e[0;33m\]%s\[\e[m\]") '

# PS1="\[\e[0;35m\][\t] \[\e[0;31m\]\u \[\e[0;32m\]\w \[\e[0;34m\]$(gb)\[\e[0m\]$ "

NO_C='\[\033[00m\]'
GITBRANCH='`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\ \(\\\\\1\)/`'

# PS1="$GREEN\u$NO_C:[$BLUE\w$YELLOW$GITBRANCH$NO_C]\$ "

PS1="[${COLOR_PURPLE}\u\[\e[0;36m\]@\h:\[\e[0m\]\[\e[0;33m\]\W\[\e[0m\]] \t $\[\e[m\] "
# PS1="[-]\e[01;41m\e[37m\@\e[00m\e [${COLOR_PURPLE}\u\[\e[0;36m\]@\h:\[\e[0m\]\[\e[0;33m\]\W\[\e[0m\]] $\[\e[m\] "

# PS1='\[\033[01;34m\]\w\[\033[00m\]\[\033[01;32m\] $(__git_ps1 "[%s]")\[\033[00m\]λ '

# For a ipython notebook and pyspark integration
if which pyspark > /dev/null; then
  export SPARK_HOME="$(brew --prefix apache-spark)/libexec"
  export PYSPARK_SUBMIT_ARGS="--master local[2]"
  export PYSPARK_DRIVER=python3
  export PYSPARK_DRIVER_PYTHON=jupyter
  export PYSPARK_DRIVER_PYTHON_OPTS=notebook
fi

# bash completion from Homebrew
if [ -f ~/.config/exercism/exercism_completion.bash ]; then
  . ~/.config/exercism/exercism_completion.bash
fi

if [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
  source /usr/local/etc/bash_completion.d/git-completion.bash
fi

# Git prompt
if [ -f /usr/local/etc/bash_completion.d/git-prompt.sh ]; then
  source /usr/local/etc/bash_completion.d/git-prompt.sh
fi

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export PATH=$HOME/.cargo/bin:$PATH
# export RUST_SRC_PATH="/usr/local/Cellar/asdf/0.5.1/installs/rust/1.28.0/toolchains/1.28.0-x86_64-apple-darwin/lib/rustlib/src/rust/src"
export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"

#To configure your current shell run
if [ -f "$HOME/.asdf/installs/rust/1.28.0/env" ]; then
  source "$HOME/.asdf/installs/rust/1.28.0/env"
fi

# hub as git
if command -v hub > /dev/null; then
  eval "$(hub alias -s)"
fi

# kubectl
if command -v kubectl &>/dev/null; then
  source <(kubectl completion bash)
fi

# Docker (for mac only)
# if hash docker-machine > /dev/null; then
#   if [ $(docker-machine status default 2>/dev/null) == "Running" ]; then
#     eval "$(docker-machine env default)"
#   fi
# fi
#

# Motivation reminder
# echo "2017 12 31" | awk '{dt=mktime($0 " 00 00 00")-systime(); print "There are " int(dt/86400/7) " weeks left until the year ends. What will you do?";}'

# asdf package manager
[ -f /usr/local/opt/asdf/asdf.sh ] && . /usr/local/opt/asdf/asdf.sh

# OPAM configuration
. /usr/local/opt/asdf/installs/ocaml/4.07.0/opam-init/init.sh > /dev/null 2> /dev/null || true

[ -f ~/.bashrc ]            && . ~/.bashrc
[ -f ~/.bashrc.local ]      && . ~/.bashrc.local
[ -f ~/.aliases ]           && . ~/.aliases
[ -f ~/.aliases.local ]     && . ~/.aliases.local
[ -f ~/.functions ]         && . ~/.functions

# Todo
# Remove dups from path
# This is in reverse order.
paths=(
    /usr/local/sbin
    $HOME/Library/Haskell/bin
    $OCLINT_HOME/bin
    /usr/local/go/bin
    $GOPATH/bin
    /usr/local/opt/openssl/bin
    /Library/TeX/texbin
    $haskell_local_bin
    $HOME/bin
)

# export PATH="$(printf '%s:' "${paths[@]%/}")$PATH"