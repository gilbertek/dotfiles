# vim:filetype=bash
# ~/.functions

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

git_last_tag() {
  git for-each-ref --sort='*authordate' --format='%(tag)' refs/tags | egrep "^${branch}\.[0-9]+$" | tail -n1
}

validate_yaml() {
 local filename="$1"
 ruby -ryaml -e "puts YAML.load_file('${filename}')"
}

parse_git_branch () {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

pman() { man -t "$@" | open -f -a Preview; }
vman() { vim -R -c "man $1" -c "bdelete 1"; }
pm() { vim `perldoc -l $1`; }

# github push - push the current branch and then open a browser window with the
# PR page open
gpr () {
  branch="$(git rev-parse --abbrev-ref HEAD)"
  regex="github\.com:(.*)\.git"
  [[ "$(git remote -v | grep push)" =~ $regex ]]

  git push -u origin "$branch"
  open "https://github.com/${BASH_REMATCH[1]}/compare/$branch?expand=1"
}

ssh-newkey() {
  ssh-keygen -t rsa -f $HOME/.ssh/$1
}

# png - build a PNG from the given text
png () {
  echo "$1" | convert label:@- a.png
}

function pid_on() {
  lsof -i tcp:$1
}

# Kills a process listening on a port
kill_tcp() {
  port=$1
  lsof -i :$port -s TCP:LISTEN -t | xargs kill
}

# Change to and list contents of a directory
function cdl { cd $1; ls; }

# Remove a direcory and its files
function rmd() {
  rm -rf "$@"
}

random-word() {
  ruby -e "puts File.readlines('/usr/share/dict/words').shuffle.take(${1-1})"
}

function asdf_update_java_home {
  asdf current java 2>&1 > /dev/null
  if [[ "$?" -eq 0 ]]
  then
      export JAVA_HOME=$(asdf where java)
  fi
}

# Use Git’s colored diff when available
function diff() {
  git diff --no-index --color-words "$@" | view -;
}

function createCerts() {
  openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mycert.pem -out mycert.pem
  openssl pkcs12 -export -out mycert.pfx -in mycert.pem -name "My Certificate"
  openssl x509 -inform pem -in mycert.pem -outform der -out mycert.cer
}

# Explains the shell cmd
function explain() {
    cmd=$@
    open "http://explainshell.com/explain?cmd=${cmd}"
}

# SSH into a tmux session
ssht() {
    ssh $* -t 'tmux attach || tmux || /bin/bash'
}

# Send adb commands to all Android devices connected to the PC.
multiadb() {
    adb devices | tail -n +2 | cut -sf 1 | xargs -iX adb -s X ${@:1}
}

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# git tag and push
# gtp <tag>
gtp() {
  command git tag -am "$1" $1 && \
  command git push --tags && \
  command git push
}

# Git keep branch update with master
function gup() {
  BRANCH=$(git rev-parse --abbrev-ref HEAD)
  git checkout master && git fetch -p origin && git merge origin/master && git checkout $BRANCH && git merge master
}

# clones git repository and cd's into it
function gc() { git clone "$1" && cd `echo "'$1'" | cut -d/ -f2 | cut -d. -f1`; }

# find shorthand
function f() {
  find . -name "$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import http.server;\nhttp.server;' "$port"

  # python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
  local port="${1:-4000}";
  local ip=$(ipconfig getifaddr en1);
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}";
}

# Does git word nicely
function gdw () {
  if [[ -n "$1" ]]; then
    git diff --word-diff=color $1 | less -r
  else
    git diff --word-diff=color
  fi
}

function gdv() {
  git diff -w "$@" | view -
}

# Change to and list contents of a directory
function cdl { cd $1; ls; }

function clear_log() {
  echo > $1 > /dev/null 2>&1
}

function clear_dev_log() {
  echo > log/bullet.log > /dev/null 2>&1
  echo > log/development.log > /dev/null 2>&1
  echo > log/test.log > /dev/null 2>&1
  echo > log/newrelic_agent.log > /dev/null 2>&1
}


# http://www.commandlinefu.com/commands/view/3555/find-duplicate-files-based-on-size-first-then-md5-hash
alias find_dups="find . -type f -exec md5 '{}' ';' | sort | uniq -f 3 -d | sed -e \"s/.*(\(.*\)).*/\1/\""


ip() {
  echo "Airport:  $(ifconfig en1 | grep netmask | awk '{print $2}')"
  echo "Ethernet: $(ifconfig en0 | grep netmask | awk '{print $2}')"
}

# Blogging
# Usage post:new title post
create_post() {
  if [[ -n "$1" ]]; then
    local file_name="$(echo $@ | tr ' ' '-' | tr '[A-Z]' '[a-z]').md"
# local file_name="$(date +%Y-%m-%d)-$(echo $@ | tr ' ' '-' | tr '[A-Z]' '[a-z]').md"
      hugo new posts/$file_name
      nvim posts/$file_name
  else
    echo "Please provide a post title"
      fi
}

# Show Battery Percentage
battery() {
  pmset -g batt | egrep "([0-9]+\%).*" -o --colour=auto | cut -f1 -d';'
}

# Show Wi-Fi Network Passwords
# Exchange SSID with the SSID of the access point you wish to query the password from.
wifipass() {
  security find-generic-password -D "AirPort network password" -a "$@" -gw
}

# Turn on Wi-Fi Adapter
offwifi() {
  networksetup -setairportpower en0 on
}

# asciinema rec
function rec() {
  command asciinema rec -t $1
}

function play() {
  command asciinema play $1
}

function cs() {
  open -a "Google Chrome" "https://devhints.io/$1"
}

function adb-wifi() {
  local port="5555"
  local ip=$(adb shell netcfg | awk 'NR==1{print $3}' | sed -E 's/\/[0-9]+$//g')

  adb tcpip $port
  adb connect $ip:$port
}

function ctx() {
  if [ -z "$1" ]; then
    kubectl config get-contexts
  else
    kubectl config use-context $1
  fi
}

# GIT SCRIPTS
g() {
  if [[ $# > 0 ]]; then
    git $@
  else
    git status
  fi
}

gcap() {
  git add . && git ci -m "$*" && gp
}


# FIX.
gfix() {
  gcap "🐛 FIX: $@"
}

# RELEASE.
grlz() {
  gcap "🚀 RELEASE: $@"
}

# DOC.
gdoc() {
  gcap "📖 DOC: $@"
}

# TEST.
function gtst() {
  gcap "✅ TEST: $@"
}

####.#### ———————————————————————————————————————————— Todolist http://todolist.site/ ———————————————————————————————————————————— ####.####
# Alias it all.
function td() {
  todolist "$@"
}

# Init.
alias tdi="todolist init"

# Add.
function tda() {
  todolist add "$@"
}

# List.
function tdl() {
  todolist list "$@"
}

# List by priority.
alias tdgc="todolist l p"

# Due.
function tdld() {
  todolist list due "$@"
}

# Edit.
function tde() {
  todolist e "$@"
}

# Complete.
function tdc() {
  todolist c "$@"
}

# Archive Complete.
function tdac() {
  todolist ac "$@"
}

# Prioritize.
function tdp() {
  todolist p "$@"
}

# Delete.
function tdd() {
  todolist d "$@"
}

# Expanding existing todos.
function tdex() {
  todolist ex "$@"
}

# Archived todos will only show up when running.
alias tdla="todolist list archived"

# The web view.
alias tdla="todolist web"

# Garbage Collection. Deletes all archived todos.
alias tdgc="todolist gc"

# Todo Dir.
alias tdir="cd ~ && cd tdir"


ssh-reagent () {
  for agent in /tmp/ssh-*/agent.*; do
    export SSH_AUTH_SOCK=$agent
    if ssh-add -l 2>&1 > /dev/null; then
      echo Found working SSH Agent:
      ssh-add -l
      return
    fi
  done
  echo Cannot find ssh agent - maybe you should reconnect and forward it?
}

# Bitly short URL
# @link https://github.com/specious/bitly-client
# @usage surl http://url.com/file/
function surl() {
  bitly-client --domain ahmda.ws "$@"
}

# RSYNC FTP type server trasnfer.
# @usage rsyncsendy local_path IP server_path
# @usage rsyncserver local_path IP server_path
function rsyncsendy() {
  rsync -chavz --partial --progress --stats "$1" root@"$2":"$3"
}

function rsyncserver() {
  rsync -chavz --partial --progress --stats "$1" root@"$2":"$3"
}


# Record terminal.
function recterm() {
  asciinema rec
}

# Find the CNAMEs
alias thecname="dig $* +nostats +nocomments +nocmd"

# Lock the screen (when going AFK)
alias lock="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

# git add commit and then fix an issue on github
# usage: gifix 5
# Where 5 is the issue number
function gifix() {
  issue=$* ;
  git add . && git ci -m "ISSUE: Fixes #$(echo -e "$issue")" && git push
}

function emptytrash() {
  sudo rm -rfv /Volumes/*/.Trashes
  sudo rm -rfv ~/.Trash
  # clear Apple’s System Logs to improve shell startup speed
  sudo rm -rfv /private/var/log/asl/*.asl
}

# find shorthand
function f() {
  find . -name "$1"
}

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

function dkbash() {
  docker exec -i -t $1 bash
}

# Usage:
#   @params: name and tag
#   buildit <webapp> <v1.0>
dkbuild() {
  docker build -t gilbertek/$1:$2 .
}

dkpush() {
  docker push gilbertek/$1:$2
}

dkclean(){
  docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
  docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

genpasswd() {
  local l=$1
  [ "$l" == "" ] && l=${1:-8}
  # tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
  cat /dev/random | LC_CTYPE=C tr -dc "[:alpha:]" | head -c $long; echo
}

jdebug() { java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005 $@;}

es-indexes() {
  curl -XGET 'localhost:9200/_aliases?pretty'
}

es-create-index() {
  curl -XPUT "localhost:9200/${1}?pretty"
}

es-delete-index() {
  curl -XDELETE "localhost:9200/${1}?pretty"
}

es-search-index() {
  curl -XGET "localhost:9200/${1}/_search?pretty"
}

es-get-index-mapping() {
  curl -XGET "localhost:9200/${1}/_mapping?pretty"
}

function cheat(){ curl cheat.sh/"$@"; }

# squashes the current changes into the previous commit
fixup() {
  local OC=`git rev-parse HEAD`
  git add -A
  git commit --fixup=$OC
  git rebase -i --autosquash $OC~1
}

# pushes the branch you are on and opens compare on github for a PR
pushpr() {
  git push -u origin `git rev-parse --abbrev-ref HEAD`
  git compare
}

pullpr() {
  git fetch origin pull/$1/head:pr-$1
  git checkout pr-$1
}

# to be run after `npm version`, pushes tags, publishes, and opens release notes
publish(){
  push && push --tags && npm publish .
  echo `git config --get remote.origin.url` | sed -e 's/\.git/\/releases/g' | echo "`cat -`/new?tag=`git describe`" | xargs open
}

# node
alias reload-deps="rm -rf node_modules && npm i"

# Gui aliases
google() { open "http://www.google.com/search?q=$@" ;}
graphviz() { open "$@" -a /Applications/Graphviz.app ;}
marked() { open "$@" -a /Applications/Marked.app ;}

cdgo() { cd $GOAPPS ;}
cdnotes() { cd ~/Notes ;}

# clojure
# lein() {
#   if [[ $1 == "figwheel" ]]; then
#     command rlwrap lein figwheel
#   else
#     command lein "$@"
#   fi
# }


# Code Review
# This will open the diff to master (the same diff as in a pull request). If you
# pass a second argument, it'll use that branch as a base instead.
review() {
  local default_branch=$(git rev-parse --abbrev-ref HEAD)
  local branch="${1:-$default_branch}"
  local base="${2:-master}"

  git fetch origin $base $branch

  # This typically fails if you have stashed changes.
  if ! git checkout $branch; then
    return 1
  fi

  nvim -c "let g:gitgutter_diff_base = 'origin/$base'" -c ":e!" $(git diff --name-only origin/$base...$branch)
}

# Logging stuff.
function header()  { echo -e "\n\033[1m$@\033[0m"; }
function success() { echo -e " \033[1;32m✔\033[0m  $@"; }
function eerror()  { echo -e " \033[1;31m✖\033[0m  $@"; }
function arrow()   { echo -e " \033[1;34m➜\033[0m  $@"; }


# AWS MFA / Temp credential helpers
function clear_sts_creds () {
  unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
}

function refresh_sts_creds () {
  # check to see if MFA_SERIAL is set
  if [ "$MFA_SERIAL" = "" ] ; then
    echo "MFA_SERIAL not set"
    return 2
  fi

  # check to see if credentials for today exist
  # override with force if necessary
  # if they do source them and exit
  TMP_CRED_FILE_PATH="/tmp/sts-creds-`date +%m-%d-%Y`.sh"
  if [ "$1" != "--force" ] && [ "$1" != "-f" ] && [ -e "/tmp/sts-creds-`date +%m-%d-%Y`.sh" ] ; then
    echo "using existing credentials, to override run \"refresh_sts_creds --force\""
    source $TMP_CRED_FILE_PATH
    return 0
  fi

  clear_sts_creds # You can't use tokens to get tokens, so start clean

  echo -n "MFA Code: "
  read MFA_TOKEN

  # trim white space
  MFA_TOKEN="$(echo -e "${MFA_TOKEN}" | tr -d '[:space:]')"

  # get credientials from AWS that last one day
  CREDS=$(aws sts get-session-token --duration-seconds 86400 --serial-number $MFA_SERIAL --token-code $MFA_TOKEN \
            --output text --query 'Credentials.[AccessKeyId, SecretAccessKey, SessionToken]')

  unset MFA_TOKEN
  # set credientials for window
  if [ $? -eq 0 ] ; then
    AWS_ACCESS_KEY_ID=$(echo "$CREDS" | awk '{print $1}')
    AWS_SECRET_ACCESS_KEY=$(echo "$CREDS" | awk '{print $2}')
    AWS_SESSION_TOKEN=$(echo "$CREDS" | awk '{print $3}')
    export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
  # store credentials in /tmp for other windows to access
    printf "export AWS_ACCESS_KEY_ID=\"${AWS_ACCESS_KEY_ID}\"
export AWS_SECRET_ACCESS_KEY=\"${AWS_SECRET_ACCESS_KEY}\"
export AWS_SESSION_TOKEN=\"${AWS_SESSION_TOKEN}\"
" > $TMP_CRED_FILE_PATH
  fi
  unset CREDS

  return 0
}


# git ignore
function gi() { curl -sLw "\n" https://www.gitignore.io/api/$@ ;}

# create html from markdown in GitHub CSS
function mdhtml {
  FILE="$1"
  pandoc "$1" --to=html5 --css=${HOME}/dotfiles/support/github.css \
    --highlight-style=haddock  --self-contained --output "${FILE%%.*}".html
}

# find todo notes in current project
function todos {
  LOCAL_DIR=$(git rev-parse --show-toplevel 2> /dev/null)
  LOCAL_DIR=${LOCAL_DIR:-.}
  if [ $# -eq 0 ]; then
    ag '(\bTODO\b|\bFIX(ME)?\b|\bREFACTOR\b)' ${LOCAL_DIR}
  else
    ag ${*:1} '(\bTODO\b|\bFIX(ME)?\b|\bREFACTOR\b)' ${LOCAL_DIR}
  fi
}
