# ~/.aliases

# ** [ Folder Navigation ] *************
alias ..="cd .."
alias ...="cd ../.."
alias dl="cd ~/Downloads"
alias dt="cd ~/Desktop"
alias readings='cd ~/Documents/Readings'
alias work='cd ~/Projects'
alias trash="sudo rm -rvf ~/.Trash/*"
alias blogs="cd ~/Projects/BLOG/leftaxe"
alias ldir='find . -type d -maxdepth 1 -mindepth 1 -exec basename {} \;'
alias grep='grep --color'
alias top='top -F -R -o cpu'
alias mv='mv -v'
alias wget='wget -c'
alias hist="history | grep $1"
alias diary='mkdir -p ~/diary && vim ~/diary/`date +"%Y-%m-%d"`.md'

alias redshift='nohup redshift -l 30.267153:-97.7430608 -t 6500:4000 &'
alias pp='python -mjson.tool'
alias curlpj='curl -X POST -H "Content-Type: application/json" - '

# Flush Directory Service cache
alias flushdns="dscacheutil -flushcache && killall -HUP mDNSResponder"

alias wttr='curl -s http://wttr.in/'
alias weather="curl -4 http://wttr.in/New_York"
alias whatsmyip='curl -s https://am.i.mullvad.net/json | jq'
alias lip="ipconfig getifaddr en0"
alias shrug="echo '¯\_(ツ)_/¯'"

# Enhanced WHOIS lookups
alias whois="whois -h whois-servers.net"

# Clean up LaunchServices to remove duplicates in the “Open With” menu
alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

# ** [ Some AWS Conveniences ] *************
alias ecr-login='eval $(aws ecr get-login --no-include-email --regison us-east-1)'
# ** [ Some Java Conveniences ] *************
alias j11="export JAVA_HOME=/usr/libexec/java_home -v 11; java -version"
alias j12="export JAVA_HOME=/usr/libexec/java_home -v 10; java -version"
alias j8="export JAVA_HOME=/usr/libexec/java_home -v 1.8; java -version"

# ** [ Some Conveniences ] *************
alias mkdir='mkdir -p'
alias paths='echo -e ${PATH//:/\\n}' # Pretty-print of some PATH variables
alias rmr="rm -rf"
alias ports="lsof -i -P"
alias tree='tree -C'
alias p='pwd'
if [ "$(uname)" = 'Darwin' ]; then
    alias ls='ls -G'
else
    alias ls='ls --color=auto'
    alias pbcopy='xsel --clipboard --input'
    alias pbpaste='xsel --clipboard --output'
fi
alias ls='ls -lhv'
alias ll='ls -lhAv'
alias l='ls -CF'
alias lsnew="ls -rtl"           # list by new
alias lsold="ls -tl"            # list by old
alias halt='halt -p'
alias v='nvim'
alias s='source ~/.bash_profile'
alias c='clear'
alias e='$EDITOR'
alias v='$VISUAL'
alias h='history'
alias curl="curl -sL" # Avoid progress bar and follow redirects
alias topdir="du -sh */ | sort -rh | head -5"
alias nom="rm -rf node_modules; npm cache clean; npm i"
alias node-prune='find . -name "node_modules" -type d -prune -exec rm -rf '{}' +'
alias yom="rm -rf node_modules; yarn"
# Add simulator to start the iOS simulator
alias simulator="open -a Simulator"

alias mount_usb="sudo mount /dev/sdb1 /mnt/usb"
alias umount_usb="sudo umount /mnt/usb"
alias mount_pi=" sudo mount.cifs //pi/BigDrive /mnt/pi -o user=pi"
alias umount_pi=" sudo umount /mnt/pi"

alias anki="anki -b ~/.anki"

alias filemerge="open -a '/Applications/Xcode.app/Contents/Applications/FileMerge.app'"
alias xcode="open -a '/Applications/Xcode.app'"

# take a screenshot
alias screenshot="import -window root -crop 1920x1200+1680+0 -quality 100 ~/screenshot-\$(date +\"%F-%T\").png"

if [[ -x "$(command -v bat)" ]]; then
  alias cat='bat'
fi

if [[ -x "$(command -v ncdu)" ]]; then
  alias du='ncdu --color dark -rr -x --exclude .git'
fi

if [[ -x "$(command -v terraform)" ]]; then
  alias tf='terraform'
fi

alias preview="fzf --preview 'bat --color \"always\" {}'"
alias watch="watch --color"
alias reload="exec $SHELL -l" # Reload the shell (i.e. invoke as a login shell)
alias www="python -m SimpleHTTPServer 8000"

# JavaScriptCore REPL
jscbin="/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc";
[ -e "${jscbin}" ] && alias jsc="${jscbin}";
unset jscbin;

# Archives
alias mktar="tar -pvczf"
alias untar="tar -zxvf"

alias stream="youtube-dl -q -o- $1 | vlc -"

# Requires asciinema and svg-term
# brew install asciinema
# npm install -g svg-term-cli
alias record="asciinema rec /tmp/temp.cast --overwrite && cat /tmp/temp.cast | svg-term > recording.svg"

# ** [ GIT ALIASES ] ******************
alias gs='git status'
alias gb='git branch -a'
alias ga='git add -p'
alias gci='git commit -m'
alias gd='git diff'
alias gwd="git diff --word-diff"
alias gco='git checkout'
alias gcob='git checkout | fzf | xargs git checkout'
alias gcp='git checkout -- $(git ls-files --modified | fzf --height=40% -m) >/dev/null'
alias stash:p='git stash pop $(git stash list | fzf | cut -d=: -f1)'
alias grb='git rebase -i $(git log --all --graph --oneline --decorate | fzf --reverse | sed -Ee "s/.* ([a-f0-9]{6,}) .*/\1/")'
alias gm='git merge --no-ff $(git branch | grep -v $(git rev-parse --abbrev-ref HEAD) | fzf)'
alias gpro="git pull --rebase origin"
alias gprom="git pull --rebase origin master"
alias gca='git commit --amend --date="$(date)"'
alias wip='gaa && gca -m "WIP"'
alias stash='git stash -u'
alias stash:l='git stash list'
alias gsh='git show HEAD'
alias grev='git diff master'
alias gha='git history --all'
alias gmt='git mergetool'
alias gpull='git pull origin'
alias push='git push -u origin $(git rev-parse --abbrev-ref HEAD)'
alias gfetch='git fetch --all --prune'
alias greset='git reset --hard HEAD~1'
alias grstu="git reset --hard @{u}" # Reset and match upstream tracking branch
# alias gpub="git push --set-upstream origin $(git_parse_branch);"
alias gv="gitk &"
alias gll='git log --graph --pretty=oneline --abbrev-commit'
alias glg="git log --graph --pretty=format:'%C(bold)%h%Creset%C(magenta)%d%Creset %s %C(yellow)<%an> %C(cyan)(%cr)%Creset' --abbrev-commit --date=relative"
alias gls="glg --stat"

alias up:module='git submodule update --remote --recursive'
alias gsu='git submodule foreach git pull origin master'
alias changelog='git log --format="%h %ai %an %s"'
alias ggpull='git pull --rebase'
alias gmu='git fetch origin -v; git fetch upstream -v; git merge upstream/master'
alias gitsearch="git rev-list --all | xargs git grep -F"

# git checkout remote
gcr() { git checkout -t origin/"$1"; }

# git fetch pull
gfpull () { git fetch && git checkout "$1" && git pull origin "$1"; }

# git fetch push
gfpush () { git fetch && git checkout "$1" && git push origin "$1"; }

# git track (create new tracking branch)
gt() { git checkout -b "$1" -t origin/"$1"; }

# git version (tag and branch at a specific deploy point)
# gv () { git tag v$1 && git checkout -b $1 && git push origin v$1 && git push origin $1; }

scoreboard() { git log | grep Author | sort | uniq -ci | sort -r; }

# ** [ DOCKER ALIASES ] ******************
alias dk='docker'
alias dk:i='docker image'
alias dk:c='docker container'
alias dk:rd='docker run -d '
alias dk:clean='docker system prune --all --volumes'
alias dk:rmi="docker stop $(docker ps -a -a) && docker rm $(docker ps -a -q)"
alias dkm='docker-machine'
alias dkm:reload='eval $(docker-machine env default)'
alias dkm:ip='docker-machine ip ${1:-default}'
alias dkm:ssh='docker-machine ssh ${1:-default}'
alias dkm:init='eval $(docker-machine env ${1:-default})'
alias dk:ps='docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Ports}}"'
alias dk:sps='clear && docker service ps --format "table {{.Name}}\t{{.Image}}\t{{.CurrentState}}"'

alias dk:esearch-6.6="docker run -d --name elasticsearch-6.6 -p 9200:9200 -p 9300:9300 -e 'discovery.type=single-node' elasticsearch:6.6.1"
alias dk:mysql-5.7="docker run -t -d -p 3306:3306 --name mysql-5.7 -e MYSQL_ALLOW_EMPTY_PASSWORD=1 mysql:5.7 --bind-address=0.0.0.0"
alias dk:neo4j="docker run -t -d -e NEO4J_AUTH=none -p 7474:7474 -p 7473:7473 -p 7687:7687  --name neo4j neo4j"
alias dk:orientdb="docker run -e ORIENTDB_ROOT_PASSWORD=orientdb -t -d -p 2424:2424 -p 2480:2480 --name orientdb orientdb"
alias dk:postgres-9.4="docker run -t -d -p 5432:5432 --name postgres-9-4 postgres:9.4.15"
alias dk:postgres="docker run -t -d -p 5432:5432 --name postgres postgres"
# alias dk:redis="docker run -t -d --rm -p 6379:6379 --name redis redis --bind 0.0.0.0"
alias dk:redis="docker run -d --rm -it --network=container:$(hostname) --name=redis redis"

alias dkc='docker-compose'
alias dkc:up='docker-compose up'
alias dkc:r='docker-compose run --rm'
# ** [ SCALA ALIASES ] ******************
alias new-sbt='g8 scala/scala-seed.g8'
alias mlog='tail -f .metals/metals.log'

# ** [ GOLANG ALIASES ] ******************

# ** [ RUST ALIASES ] ******************
alias cck="cargo watch -s 'cargo check --color always 2>&1 | head -n 50'"

# ** [ RUBY ALIASES ] ******************
alias web='ruby -run -e httpd . -p 5000'

alias b='bundle'
alias bi="bundle config set path 'vendor/bundle' && bundle binstubs --all --path 'vendor/bundle/bin' && bundle install"
alias be="bundle exec"
alias binit="bi && bundle package && echo 'vendor/bundle' >> .gitignore && echo 'vendor/cache' >> .gitignore"
alias rails_best='rails_best_practices -e "db/migrate,vendor" -f html .'
alias cop='rubocop'
alias devlog='tail -f log/development.log'
alias cucumber='bundle exec cucumber'
alias rspec='bundle exec rspec'
alias rake='bundle exec rake'
alias br='bundle exec rake'
alias rs='b rails server'
alias rcs='rc --sandbox'
alias cap='bundle exec cap'
alias binstubs="bundle --binstubs --standalone"

# ** [ PYTHON ALIASES ] ******************
alias pjson='python -mjson.tool'
alias python=python3
alias pip=pip3
alias pip:u="pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U"

# ** [ ANDROID ALIASES ] ******************
alias adb-screenshot='adb shell screencap -p | sed 's/\r$//' > screen.png'
alias adbkill='sudo /usr/local/share/android-sdk/platform-tools/adb kill-server'
alias adbstart='sudo /usr/local/share/android-sdk/platform-tools/adb start-server'
alias adbrestart='adbkill;adbstart'

# ** [ ELIXIR ALIASES ] ******************
alias phx.s="[ -d assets ] && iex -S mix phx.server || iex -S mix phoenix.server"
alias mixs="iex -S mix"
alias phx:help='mix help | grep -i phoenix'

# ** [ C++ ALIASES ] ******************
alias cppcompile='c++ -std=c++11 -stdlib=libc++'

# ** [ POSTGRESQL ALIASES ] ******************
alias pg:start="pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start"
alias pg:stop="pg_ctl -D /usr/local/var/postgres stop -s -m fast"
alias pg:status="pg_ctl -D /usr/local/var/postgres status"
# alias parity='development restore production --app vive-production'

# ** [ MongoDB ALIASES ] ******************
alias mg:kill='mongo admin --eval "db.shutdownServer()"'

# ** [ Mysql ALIASES ] ******************
alias mysql:start="mysql.server start"
alias mysql:stop="mysql.server stop"

# ** [ REDIS ALIASES ] ******************
alias redis:start="redis-server > /dev/null &"
function redis:stop {
  ps -ax | grep redis-server | awk 'NR==1{print $1}' | xargs kill
}

# ** [ MEMCACHED ALIASES ] ******************
alias memcached:start="memcached -d"
alias memcached:stop="memcached stop"

# ** [ TMUX ALIASES ] ******************
alias tmx:l='tmux list-sessions'
alias tmx:a="tmux attach-session -t ${1}"
alias tmx:k="tmux kill-session -t $1"
alias mux='TERM=screen-256color tmuxinator'

# ** [ ELASTIC SEARCH ALIASES ] ******************
alias es:start="elasticsearch -d"
alias es:stop="pkill -f elasticsearch"
alias es:di="curl -XDELETE 'http://localhost:9200/_all'" # delete indexes

# ** [ YOUTUBE-DL SHORTCUTS ] ******************
# youtube downloader
alias yt-video="youtube-dl -citk --max-quality mp4 --write-auto-sub --write-sub --sub-lang en,es"
alias yt-audio="youtube-dl -citk --max-quality mp3 --audio-format mp3 --extract-audio --audio-format mp3 --audio-quality 192k"

# ** [ MACOS SHORTCUTS ] ******************
alias mac-clean-logs='sudo rm -rf /private/var/log/asl/*.asl'

# Language aliases
alias rb='ruby'
alias py='python'
alias ipy='ipython'

#Elm
alias epi="elm package install"

alias emacs='emacs -nw'

# ** [ KUBECTL SHORTCUTS ] ******************
alias k='kubectl'
alias k:i="kubectl --insecure-skip-tls-verify=true"
alias kdescribe="kubectl describe"
alias kget="kubectl get"
alias kcreate="kubectl create"
alias kapply="kubectl apply"
alias kdelete="kubectl delete"
alias kscale="kubectl scale"
alias krollout="kubectl rollout"
alias klogs="kubect logs"
alias kswitch="kubect config use-context"
alias kcontxt="kubect config current-context"
# Query common resources
# Resource reference list:
# pods (po), services (svc), deployments, replicasets (rs)
# replicationcontrollers (rc), nodes (no), events (ev),
# limitranges (limits), persistentvolumes (pv),
# persistentvolumeclaims (pvc), resourcequotas (quota),
# namespaces (ns), serviceaccounts (sa), ingresses (ing),
# horizontalpodautoscalers (hpa), daemonsets (ds), configmaps,
# componentstatuses (cs), endpoints (ep), and secrets.
alias pods="get pods"
alias services="get svc"
alias svc="kget svc"
alias deployments="get deployments"
alias kdep="get deployments" # NON-STANDARD!!
alias replicasets="get rs"
alias replicationcontrollers="get rc"
alias rc="get rc"
alias nodes="get nodes"
alias limitranges="get limitranges"
alias limits="get limitranges"
alias events="get events"
alias persistentvolumes="get pv"
alias pv="kget pv"
alias persistentvolumeclaims="get pvc"
alias pvc="get pvc"
alias namespaces="get ns"
alias ingresses="get ing"
alias ing="get ing"
alias configmaps="get configmaps"
alias secrets="get secrets"

# ** [TIG SHORTCUTS ] ******************
alias tigu='tig HEAD@{u}..'
alias tiga='tig ..@{u}'

# ** [ML SHORTCUTS ] ******************
export BREAK_CHARS="\"#'(),;\`\\|"
alias sbcl="rlwrap -b \$BREAK_CHARS sbcl"

# ** [PACMAN SHORTCUTS ] ******************
alias pacman='sudo pacman --color=auto'
alias pac:in='pacman -S'    # install from repo
alias pac:ins='pacman -U'   # install from file
alias pac:rm='pacman -Rns' # remove package
alias pac:re='pacman -R'    # remove keep config
alias pac:cl='pacman -Sc'   # clean package cache
alias pac:clx='pacman -Scc'   # clean package cache
alias pac:up='pacman -Syu'   # upgrade
alias pac:fd='pacman -Ss'
alias pac:fltr='pacman -Qs'
alias sysctl='systemctl'

# ** [PACMAN SHORTCUTS ] ******************
alias yay:i='yay -Ps' # Print system statistic
alias yay:up='yay -Syu' # Perform system upgrade
alias yay:c='yay -Yc' # Clean unneeded dependencies
alias yay:r='yay -Rns' # Remove a package

# ** [CLOJURE SHORTCUTS ] ******************
alias shadow='shadow-cljs'
alias shdw='shadow-cljs'
alias lein-debug='JVM_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${debug_port:-5005} lein'
alias cljsbuild="lein trampoline cljsbuild $@"
# alias clj-repl='function do_repl { clojure -J-Dclojure.server.repl="{:port ${1:-5555} :accept clojure.core.server/repl}" -A:rebel; }; do_repl'
alias clj-repl='clojure -Sdeps "{:deps {com.bhauman/rebel-readline {:mvn/version \"0.1.4\"}}}" -m rebel-readline.main'
alias cljs-repl='function do_repl { clojure -J-Dclojure.server.repl="{:port ${1:-5555} :accept cljs.server.node/repl}" -R:cljs-canary -A:rebel-cljs -m cljs.main -re node -r; }; do_repl'
alias cljs='clj -Sdeps "{:deps {org.clojure/clojurescript {:mvn/version \"1.9.946\"}}}" -m cljs.repl.node'
alias rebel='clojure -A:rebel'
alias repl='clojure -Arepl'

# ** [MAVEN SHORTCUTS ] ******************
alias mc='mvn --quiet clean'
alias mci='mvn --quiet clean install'
alias mcist='mvn --quiet clean install -DskipAllTests -T3 -Dmaven.test.skip=true'
alias mcisst='mvn --quiet clean install -DskipTests -DskipITests -DskipAllTests -Dskip.checkstyle -Dcheckstyle.skip -Dpmd.skip -Djacoco.skip -T3'

# ** [HASKELL SHORTCUTS ] ******************
alias sbuild="stack build        -j 2 --test --bench --no-run-tests --no-run-benchmarks"
alias sbuildf="stack build --fast -j 2 --test --bench --no-run-tests --no-run-benchmarks"
alias sbuild:w="stack build --fast --file-watch" # Build binaries
alias sbuild:t="stack build --fast --file-watch --tests" # Build and run tests
alias sbuild:doc="stack build --fast --file-watch --haddock --no-haddock-deps" # Build docs"
# Haskell
if type stack > /dev/null 2>&1; then
  alias ghc="stack ghc"
  alias ghci="stack ghci"
  alias runghc="stack runghc"
  alias runhaskell="stack runhaskell"
  eval "$(stack --bash-completion-script stack)"
fi

# ** [ NVIM SHORTCUTS ] ******************
alias nvu="nvim +PlugInstall +UpdateRemotePlugins +qa"
alias sv='sudo nvim'

# ** [ NETWORKING SHORTCUTS ] ******************

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

alias myip='curl ip.appspot.com'                    # myip:         Public facing IP Address
alias netCons='lsof -i'                             # netCons:      Show all open TCP/IP sockets
alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
alias lsock='sudo /usr/sbin/lsof -i -P'             # lsock:        Display open sockets
alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'   # lsockU:       Display only open UDP sockets
alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'   # lsockT:       Display only open TCP sockets
alias ipInfo0='ipconfig getpacket en0'              # ipInfo0:      Get info on connections for en0
alias ipInfo1='ipconfig getpacket en1'              # ipInfo1:      Get info on connections for en1
alias openPorts='sudo lsof -i | grep LISTEN'        # openPorts:    All listening connections
alias showBlocked='sudo ipfw list'                  # showBlocked:  All ipfw rules inc/ blocked IPs

# ** [ WIRESHARK SHORTCUTS ] ******************
# alias ws=
# # export WS_OPTIONS=(-o tcp.no_subdissector_on_error:false -d tcp.port==1-65535,ssl -o ssl.keylog_file:/home/dsf/PCAPS/all-pcaps.keylogfile)
# export WS_OPTIONS=(-o ssl.keylog_file:/home/dsf/PCAPS/all-pcaps.keylogfile)
# alias lvs='tmux split -d lnav ssldebug'
# alias tsv='truncate -s0 ssldebug'
# alias ww='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:/dev/null -r cap.pcapng &'
# alias wwss='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:/dev/stdout -r cap.pcapng'
# alias wws='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:ssldebug -r cap.pcapng & truncate -s0 ssldebug'
# alias wwso='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:ssldebug-orig -r cap.pcapng & truncate -s0 ssldebug-orig'

# ** [ MACOS SHORTCUTS ] ******************
# Empty the Trash on all mounted volumes and the main HDD
# Also, clear Apple’s System Logs to improve shell startup speed
# Also, run periodic maintenence tasks
alias emptytrash="echo Emptying trashes...; \
  sudo rm -rfv /Volumes/*/.Trashes; \
  sudo rm -rfv ~/.Trash; \
  echo Running all periodic maintenence tasks...; \
  sudo periodic daily weekly monthly; \
  echo Removing old logs...; \
  sudo rm -rfv /private/var/log/asl/*.asl; \
  sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 'delete from LSQuarantineEvent' >/dev/null 2>&1; \
  sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 'vacuum' >/dev/null 2>&1"
