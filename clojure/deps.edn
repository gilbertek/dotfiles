;; The deps.edn file describes the information needed to build a classpath.
;;
;; When using the `clojure` or `clj` script, there are several deps.edn files
;; that are combined:
;; - install-level
;; - user level (this file)
;; - project level (current directory when invoked)
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.



{
  ;; Paths
  ;;   Directories in the current project to include in the classpath

  ;; :paths ["src"]

  ;; External dependencies

  ;; :deps {
  ;;   org.clojure/clojure {:mvn/version "1.9.0"}
  ;; }

  ;; Aliases
                                                                                                                                                                                                                                                                                                                	;;   resolve-deps aliases (-R) affect dependency resolution, options:
                                                                                                                                                                                                                                                                                                                	;;     :extra-deps - specifies extra deps to add to :deps
                                                                                                                                                                                                                                                                                                                	;;     :override-deps - specifies a coordinate to use instead of that in :deps
                                                                                                                                                                                                                                                                                                                	;;     :default-deps - specifies a coordinate to use for a lib if one isn't found
                                                                                                                                                                                                                                                                                                                	;;   make-classpath aliases (-C) affect the classpath generation, options:
                                                                                                                                                                                                                                                                                                                	;;     :extra-paths - vector of additional paths to add to the classpath
                                                                                                                                                                                                                                                                                                                	;;     :classpath-overrides - map of lib to path that overrides the result of resolving deps

  ;; :aliases {
  ;;   :deps {:extra-deps {org.clojure/tools.deps.alpha {:mvn/version "0.2.196"}}}
  ;;   :test {:extra-paths ["test"]}
  ;; }
  :aliases
  {;; pull in specific versions of Clojure
   :1.10 {:override-deps {org.clojure/clojure {:mvn/version "1.10.0"}}}

  ;; testing and debugging tools:
   :test {:extra-paths ["test" "src/test/clojure"]
          :extra-deps {org.clojure/test.check {:mvn/version "RELEASE"}}}

  ;; see https://github.com/jonase/eastwood#running-eastwood-in-a-repl
   :eastwood {:extra-deps {jonase/eastwood {:mvn/version "RELEASE"}}
              :main-opts ["-m" "eastwood.lint" "{:source-paths,[\"src\"],:test-paths,[\"test\"]}"]}

   ;; - see https://github.com/bhauman/rebel-readline
   ;; - start a Rebel Readline REPL:
   :rebel {:extra-deps {com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
                    :main-opts  ["-m" "rebel-readline.main"]}

   ;; - start a Socket REPL on port 50505:
   ;; - usage: clj -A:socket
   :socket {:jvm-opts ["-Dclojure.server.repl={:port,50505,:accept,clojure.core.server/repl}"]}

   ;; - start a Socket pREPL on port 40404:
   ;; - Usage: clj -A:prepl
   :prepl {:jvm-opts ["-Dclojure.server.repl={:port,40404,:accept,clojure.core.server/io-prepl}"]}

   ;; REPL-related tools:
   ;; - start a modern nREPL server on a random available port:
   :nrepl {:extra-deps {nrepl {:mvn/version "RELEASE"}}
           :main-opts ["-m" "nrepl.cmdline"]}

   ;; project creation from templates:
  ;; - see https://github.com/seancorfield/clj-new
  ;; - create an application project:
  ;;   - clj -A:new app myname/myapp
  ;;   - cd myapp
  ;;   - clj -m myname.myapp # run it!
  ;;   - clj -A:test:runner # run the tests!
  ;; - create a library project:
  ;;   - clj -A:new lib myname/my-cool-lib
  ;;   - cd my-cool-lib
  ;;   - clj -A:test:runner # run the tests!
   :new {:extra-deps {seancorfield/clj-new
                      {:mvn/version "0.5.5"}}
         :main-opts ["-m" "clj-new.create"]}

   ;; uberjar building:
   ;; - see https://github.com/seancorfield/depstar for a minimalist approach:
   ;;   - clj -A:uberjar result.jar
   ;; - to run it:
   ;;   - java -cp result.jar clojure.main -m mymain.namespace
   ;; - build a library JAR:
   ;;   - clj -A:jar result-lib.jar
   :uberjar {:extra-deps {seancorfield/depstar {:mvn/version "RELEASE"}}
             :main-opts ["-m" "hf.depstar.uberjar"]}
   :jar {:extra-deps {seancorfield/depstar {:mvn/version "RELEASE"}}
         :main-opts ["-m" "hf.depstar.jar"]}

   ;; start the Liquid Clojure editor
   ;; - see https://github.com/mogenslund/liquid
   :liquid
    {:extra-deps {mogenslund/liquid {:mvn/version "RELEASE"}}
     :main-opts ["-m" "dk.salza.liq.core"]}}}



;; Provider attributes

;; :mvn/repos {
;;   "central" {:url "https://repo1.maven.org/maven2/"}
;;   "clojars" {:url "https://clojars.org/repo"}
;; }



