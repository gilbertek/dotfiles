
#!/usr/bin/env bash

# Install dotfiles symlinks.
set -e

DRY_RUN=0

help() {
  echo 'Sync and manage dot files'
  echo ''
  echo "Usage: $0 [options]"
  echo ''
  echo "options:"
  echo -e "\\t-h | --help: get this message"
  echo -e "\\t-n | --dry-run: to see a dry run of what the script will do"
  echo -e "\\tlinks: Create symlink files"
  echo -e "\\tvim: install for vim"
  echo -e "\\tneovim: install for neovim"
}

msg() {
  printf '%b\n' "$1" >&2
}

success() {
  if [ "$ret" -eq '0' ]; then
    msg "\\033[32m[âœ”]\\033[0m ${1}${2}"
  fi
}

warning(){
  msg "\\033[33mWarning:\\033[0m ${1}${2}"
}

error() {
  msg "\\033[31m[âœ˜]\\033[0m ${1}${2}"
  exit 1
}


prepare_dirs() {
  msg "Create some required folders... if necessary"
  mkdir -p $HOME/.mail/{Personal,Work} \
    $HOME/.{ssh,bundle,asdf,boot,cljs,clojure,ghc,lein} \
    $HOME/.config/{nvim} \
    $HOME/bin
}

link_files() {
  # prepare_dirs
  msg "${DRY_RYN}"


  for f in $(find . -type f -not -name setup); do
    rel_target=$(realpath --relative-to="$PWD" "$f")
    link "$(realpath "$f")" "/$rel_target"
  done
}

install_nvim() {
  msg "Create some required folders... if necessary"
  mkdir -p $HOME/.config/{nvim}
}

# ARGS: (source, dest)
link() {
  if [ -e "$2" ]; then
    if [ "$(realpath "$2")" = "$1" ]; then
      echo "$1 is already linked to $2"
    else
      warning "Cannot link $1 to $2: destination exists"
    fi
  elif [ "$DRY_RUN" = 1 ]; then
    success "[DRY RUN] Would link $1 to $2"
  else
    if ln -s "$1" "$2"; then
      success "Linked $1 to $2"
    else
      warning "Failed to link $1 to $2"
    fi
  fi
}

case "$1" in
  -n | --dry-run)
    DRY_RUN=1
    printf "Ouput what the script will do\n"
    link_files
    exit 64;;
  -h | --help)
    help
    exit 1;;
  links)
    link_files;;
  vim)
    echo "Installing vim"
    EDITOR=vim;;
  neovim)
    echo "Installing neovim"
    install_nvim
    EDITOR=nvim;;
  *)
    echo "Please enter an option to proceed."
    help
    exit 1;;
esac



# OSX=$(test "`uname`" == "Darwin" && echo "x")
# LINUX=$(test "`uname`" == "Linux" && echo "x")

# DOTFILE_ROOT="$HOME/dotfiles/bash"
# DOTFILES='functions aliases bash_profile tmux.conf'

# cd "$DOTFILE_ROOT" || return

# git pull origin master;

# # if empty(glob('~/.vim/autoload/plug.vim'))
# # fi
# # mkdir -p ~/.config/nvim
# # ln -sfn "$DOTFILE_ROOT/nvim/init.vim" ~/.config/nvim/init.vim
# #
# # curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \
# #     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# # nvim +PlugInstall +GoInstallBinaries +qall

# has() {
#   command -v "$1" > /dev/null 2>&1
# }

# create_link() {
#   if [ -e "$1" ]; then
#     ln -sf "$1" "$2"
#   fi
# }

# create_symlinks() {
#   for file in $DOTFILES; do
#     if [ -e "$HOME/.$file" ]; then
#       warning ".$file alreadly exists in your home directory. Are you sure to overwrite it? ([y]/n)"
#       read -r -n 1;
#       msg ""

#       if [[ ! $REPLY ]] || [[ $REPLY =~ ^[Yy]$ ]]; then
#         create_link "$DOTFILE_ROOT/$file" "$HOME/.$file"
#       fi
#     else
#       ln -s "$DOTFILE_ROOT/$file" "$HOME/.$file"
#     fi
#   done
# }

# if [ $OSX ]; then
#   echo "Executing some OSX specific changes..."
#   if ! has brew; then
#     echo "Installing brew..."
#     /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#   fi
#   brew install git bash-completion ctags \
#     tmux reattach-to-user-namespace tree wget gnupg \
#     openssl pinentry pkg-config bash-completion jsonpp json-c

#   brew cask install iterm2 spectacle
# fi

# if [ $LINUX ]; then
#   if has dnf; then
#     sudo dnf install -y xclip wget
#   fi
# fi

# create_symlinks
# ret="$?"
# success "Dotfiles have been configured! Done! ðŸ¤˜"
